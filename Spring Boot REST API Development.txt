								   Spring Boot REST API Development
..........................................................................................................................................................................................................................................

In General , we can build many types of apps in Spring boot

Common types of apps

1.CommandLine application.
2.Web Applications
3.Message Oriented Application
etc...


Web Applications:

1.Dynamic Web Application:
          Type of web application which talks to data sources, read data , build html pages.
   Users finally access html pages...

Building web sites.

How to build Dynamic web application in Spring /Spring Boot?

 Spring provides a module/project called "Spring-MVC"


2.Web Service
 1.SOAP Web Service -Spring Web Services-4.0.10
  2.RestFull Web Services  - Spring MVC
  3.GraphQL -  Alternate to REST
...........................................................................................................................................................................................................................................
							Spring boot and REST full web service Development
........................................................................................................................................................................................................................................

What is REST?

RE-Representational 
S-State 
T-Transfer

RE-Representational
  Data format - JSON, XML, AVRO, PROTOBuf ,pdf, media
S - State 
   Data - Objects and Collections

T- Transfer
  Data is converted into any format which is user interested and transfer over http protocal.

REST is  just specification which was released as part of http specification by co author of http protocol , Roy Fielding.

https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm

....................................................................................
				   REST Working Principles
....................................................................................

REST Works based on HTTP protocol and its semantic verbs

POST -----> CREATE
GET ------ >READ
PUT | PATCH--------->UPDATE
DELETE-------DELETE

CURD Operations
........................................................................................................................................................................................................................................
Steps to build REST API

1.Resource
  Domain model, eg Order,Customer,Student,Trainer,Subject

2.Expose api
   Every resource has api , which helps to transfer and get data from and to...

3.Connect to DataSource
   Every api connects to data source in order to get data/read data..

How to represent Resource?

public class OrderController {

}

How to Expose api?


public class OrderController{

 //apis
  public List<Orders> findAll(){}
  public Order findById(Long id){}
  public Orders create(Order order){}
}

how resource and apis are mapped with "HTTP" protocol?

1.Every resource must be identified by unique "URL" "/api/orders"

2.Every api is identified by "http verbs" - GET,POST,PUT,DELETE

How to map url and map http verbs in spring?

 Spring MVC offers annotations
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								Spring boot with Restful web development
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

In order to run web apps, we need web container.
Spring boot brings embeded web container - tomcat by default.

Spring boot web apps are packaged as "fat jar/uber jar" file.

Spring web app/REST APP Types:
..........................................................

1.Blocking web app
   default web app
 	Spring Module is "spring-web" / "spring-mvc"
2.Non Blocking web app
	 Spring module is "spring-web flux"

...........................................................................................................................................................................................................................................
			 Spring boot Rest api development

1.create project with following dependency(core)
 project can be created 
  ->standalone maven project and add dependency.
  ->spring initializer 
    https://start.spring.io/

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.ibm.spring</groupId>
	<artifactId>springrestapp</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>springrestapp</name>
	<description>Demo Project for Spring Rest</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>

package com.ibm.web;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class RestApplication {

	public static void main(String[] args) {
		SpringApplication.run(RestApplication.class, args);
	}

}

After Running we can test application:
http://localhost:8080/

We get White lable Error.

 if you see this message then your app is running successfully.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										API Development
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
1.Define Resource
 In Spring Resource is called "Controller" so the name of the Resource would be like below
  CustomerController,OrderController

package com.ibm.web.api.hello;

public class HelloController {
}


2.Define api inside Resource

   findAll, findById,save,update,remove

package com.ibm.web.api.hello;


public class HelloController {

    public String sayHello() {
        return "Hello";
    }
}


3.Use Annotations to mark Resource apis..

In order to convert normal class and methods into Rest aware

Annotations:
1.@RestController - @Controller
2.@RequestMapping -  URL mapper
3.Method annotations
  @GetMapping
  @PostMapping
  @PutMapping
  @DeleteMapping


eg:
package com.ibm.web.api.hello;

//Bean : @Component,@Service,@Respository,@Controller(Dynamic web app),@RestController

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

//Resource
@RestController
@RequestMapping("/api/hello")
public class HelloController {

    //api -method
    @GetMapping
    public String sayHello(){
        return  "Hello";
    }
}

package com.ibm.web.api.hello;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;



@SpringBootApplication
public class SpringHelloControllerMain {

    public static void main(String[] args) {
        SpringApplication.run(SpringHelloControllerMain.class, args);
    }

}
Testing:

GET http://localhost:8080/api/hello

Response:
Hello
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										










